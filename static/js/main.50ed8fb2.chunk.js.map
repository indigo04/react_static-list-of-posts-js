{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","_ref","comment","name","email","body","_jsxs","className","children","_jsx","href","concat","CommentList","comments","map","id","UserInfo","user","PostInfo","post","title","length","PostList","posts","postsFromServer","userId","usersFromServer","find","postId","commentsFromServer","filter","App","ReactDOM","render","document","getElementById"],"mappings":"o08IAAO,MAAMA,EAAcC,IAAA,IAAGC,SAAS,KAAEC,EAAI,MAAEC,EAAK,KAAEC,IAAQJ,EAAA,OAC5DK,eAAA,OAAKC,UAAU,cAAaC,SAAA,CAC1BF,eAAA,OAAKC,UAAU,qBAAoBC,SAAA,CACjCC,cAAA,UAAQF,UAAU,oBAAmBC,SAClCL,IAGF,OAEDM,cAAA,KACEF,UAAU,qBACVG,KAAI,UAAAC,OAAYP,GAAQI,SAEvBJ,OAILK,cAAA,OAAKF,UAAU,oBAAmBC,SAC/BH,Q,MCfA,MAAMO,EAAcX,IAAA,IAAC,SAAEY,GAAUZ,EAAA,OACtCQ,cAAA,OAAKF,UAAU,cAAaC,SACzBK,EAASC,KAAIZ,GACZO,cAACT,EAAW,CACVE,QAASA,GACJA,EAAQa,S,MCNd,MAAMC,EAAWf,IAAA,IAAGgB,MAAM,KAAEd,EAAI,MAAEC,IAASH,EAAA,OAChDQ,cAAA,KAAGF,UAAU,WAAWG,KAAI,UAAAC,OAAYP,GAAQI,SAC7CL,K,MCAE,MAAMe,EAAWjB,IAAA,IAAGkB,MAAM,MAAEC,EAAK,KAAEH,EAAI,KAAEZ,EAAI,SAAEQ,IAAYZ,EAAA,OAChEK,eAAA,OAAKC,UAAU,WAAUC,SAAA,CACvBF,eAAA,OAAKC,UAAU,mBAAkBC,SAAA,CAC/BC,cAAA,MAAIF,UAAU,kBAAiBC,SAC5BY,IAGHd,eAAA,KAAAE,SAAA,CACG,eACDC,cAACO,EAAQ,CAACC,KAAMA,UAIpBR,cAAA,KAAGF,UAAU,iBAAgBC,SAC1BH,IAGFQ,EAASQ,OACNZ,cAACG,EAAW,CAACC,SAAUA,IACvBJ,cAAA,KAAG,UAAQ,oBAAmBD,SAAC,wBCrB1Bc,EAAWrB,IAAA,IAAC,MAAEsB,GAAOtB,EAAA,OAChCQ,cAAA,OAAKF,UAAU,WAAUC,SACrBe,EAAMT,KAAIK,GACVV,cAACS,EAAQ,CAACC,KAAMA,GAAWA,EAAKJ,SCctC,MAAMQ,EAAQC,EAAgBV,KAAIK,IAAI,UACjCA,EACHF,MAXmBQ,EAWDN,EAAKM,OAVhBC,EAAgBC,MAAKV,GAAQA,EAAKF,KAAOU,KACzC,MAUPZ,UAPuBe,EAOGT,EAAKJ,GANxBc,EAAmBC,QAAO5B,GAAWA,EAAQ0B,SAAWA,MADjE,IAAyBA,EALJH,KAeRM,EAAMA,IACjBzB,eAAA,WAASC,UAAU,MAAKC,SAAA,CACtBC,cAAA,MAAIF,UAAU,aAAYC,SAAC,yBAC3BC,cAACa,EAAQ,CAACC,MAAOA,OCxBrBS,IAASC,OACPxB,cAACsB,EAAG,IACJG,SAASC,eAAe,W","file":"static/js/main.50ed8fb2.chunk.js","sourcesContent":["export const CommentInfo = ({ comment: { name, email, body } }) => (\n  <div className=\"CommentInfo\">\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">\n        {name}\n      </strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${email}`}\n      >\n        {email}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {body}\n    </div>\n  </div>\n);\n","import { CommentInfo } from '../CommentInfo';\nimport './CommentList.scss';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"CommentList\">\n    {comments.map(comment => (\n      <CommentInfo\n        comment={comment}\n        key={comment.id}\n      />\n    ))}\n  </div>\n);\n","import './UserInfo.scss';\n\nexport const UserInfo = ({ user: { name, email } }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\nimport './PostInfo.scss';\n\nexport const PostInfo = ({ post: { title, user, body, comments } }) => (\n  <div className=\"PostInfo\">\n    <div className=\"PostInfo__header\">\n      <h3 className=\"PostInfo__title\">\n        {title}\n      </h3>\n\n      <p>\n        {' Posted by  '}\n        <UserInfo user={user} />\n      </p>\n    </div>\n\n    <p className=\"PostInfo__body\">\n      {body}\n    </p>\n\n    {comments.length\n      ? <CommentList comments={comments} />\n      : <b data-cy=\"NoCommentsMessage\">No comments yet</b>}\n  </div>\n);\n","import { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    { posts.map(post => (\n      <PostInfo post={post} key={post.id} />\n    ))}\n  </div>\n);\n","import './App.scss';\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\nimport { PostList } from './components/PostList';\n\n// import postsFromServer from './api/posts.json';\n// import commentsFromServer from './api/comments.json';\n// import usersFromServer from './api/users.json';\n\nfunction getUserById(userId) {\n  return usersFromServer.find(user => user.id === userId)\n      || null;\n}\n\nfunction getCommentsById(postId) {\n  return commentsFromServer.filter(comment => comment.postId === postId);\n}\n\nconst posts = postsFromServer.map(post => ({\n  ...post,\n  user: getUserById(post.userId),\n  comments: getCommentsById(post.id),\n}));\n\nexport const App = () => (\n  <section className=\"App\">\n    <h1 className=\"App__title\">Static list of posts</h1>\n    <PostList posts={posts} />\n  </section>\n);\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}